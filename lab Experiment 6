#include<stdio.h>//(10 march)
#include<stdlib.h>
#define size 100
int queue[size] , front =-1, rear =-1;
int isEmpty(){
    return (front == -1) ? 1 : 0;
}
int isFull(){
    return (rear == size-1) ? 1: 0;
}
void enqueue(int data){
    rear++;
    queue[rear]= data;
    // queue[++rear]= data;
    if(front ==-1){
        front = rear;
    }
    printf("Element Inserted");
}
int dequeue(){
    int data = queue[front];
    if(front == rear){
        front =rear=-1;
    }
    else{
        front++;
    }
    return data;

}

int peek(){
    return queue[front];
}
void display(){
    printf("Queue element are:\n");
    for(int i=0;i<=rear;i++){
        printf("%d ",queue[i]);
    }
}
int main (){
    while(1){
        printf("1.Enqueue\n");
        printf("2.Dequeue\n");
        printf("3.Peek\n");
        printf("4.Display\n");
        printf("5.Exit\n");
        int choice , data ;
        printf("Enter choice : ");
        scanf("%d",&choice);
        switch(choice){
            case 1 :
            if(isFull()) {
                printf("Queue overflow!!\n");
            }
            else {
                printf("Enter Element : ");
                scanf("%d",&data);
                enqueue(data);
            }
            break;
            case 2 :
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else  {
            printf("%d is deleted  from the queue\n",dequeue());
            }
            break;
            case 3 :
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else {
            printf("%d is front element in the queue\n",peek());
            }
            break;
            case 4 : 
            if(isEmpty()){
                printf("Queue underflow!!\n");
            }
            else {
                display();
            }
            break;
            case 5 :
            exit(0);
            break;
            default : 
            printf("Invalid operations !\n");
        }
        printf("\n");
    }
    return 0;
}
